{"version":3,"sources":["trivia.png","components/Header.jsx","services/fetchTokenApi.js","Redux/Action/index.js","Pages/Feedback.js","components/Timer.jsx","Pages/Game.js","Pages/Login.js","tests/helpers/addTokenToStorage.js","Pages/Ranking.js","Pages/Settings.js","App.js","Redux/Reducer/player.js","Redux/Reducer/token.js","Redux/Reducer/asks.js","Redux/Reducer/index.js","Redux/Store/index.js","index.js"],"names":["module","exports","Header","this","props","name","email","score","gravatar","MD5","toString","className","src","alt","data-testid","logo","Component","connect","store","player","gravatarEmail","fetchToken","fetch","response","json","requestToken","type","getQuestions","data","getScorePoints","getNextBtnClick","bool","handleDisableBtns","getAssertions","addPoint","Feedback","countAsserts","count","handleLocalStorageRanking","history","playerInfo","ranking","token","localStorage","getItem","setItem","loadPlayers","JSON","parse","saveNewPlayers","stringify","push","handlePlayAgainBtn","dispatch","resetAssertions","onClick","assertions","Timer","state","timer","setInterval","setState","prevState","resetTimer","getTimer","clearInterval","size","nextBtnClick","Game","handleQuestions","questionsIndex","getGameData","handleMultipleOptions","correctAnswer","correct_answer","answersArr","incorrect_answers","concat","i","length","random","Math","floor","getMultiplier","difficulty","handleAnswersClick","id","target","correct","wrong","showNextBtn","stopTimer","totalScore","handleNextBtnClick","isDisabled","removeItem","category","question","map","el","index","key","disabled","asks","results","Login","handleChange","value","handleClick","inputName","inputEmail","saveTokenToRedux","getTokenFromStore","htmlFor","placeholder","onChange","getResponseCode","responseCode","url","responseAsk","error","savePlayerInfo","Ranking","array","Object","values","sort","a","b","console","log","React","Settings","App","exact","path","component","INITIAL_STATE","action","responseMessage","isLoading","response_code","response_message","rootReducer","combineReducers","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8772ac0c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { MD5 } from 'crypto-js';\nimport '../Style/Header.css';\nimport logo from '../trivia.png';\n\nclass Header extends Component {\n  render() {\n    const { name, email, score } = this.props;\n    const gravatar = MD5(email).toString();\n\n    return (\n      <div className=\"header\">\n        <div className=\"userPicture\">\n          <img\n            className=\"picture\"\n            src={ `https://www.gravatar.com/avatar/${gravatar}` }\n            alt=\"\"\n            data-testid=\"header-profile-picture\"\n          />\n          {/* <h2> Olá, </h2> */}\n          <h2 data-testid=\"header-player-name\">{name}</h2>\n        </div>\n        <div>\n          <div className=\"App-header\">\n            <img src={ logo } className=\"logoHeader\" alt=\"logo\" />\n          </div>\n        </div>\n        <div className=\"score\">\n          <h3 className=\"youScore\">\n            Your Score is:\n          </h3>\n          <h3 data-testid=\"header-score\" className=\"scoreNumber\">{ score }</h3>\n        </div>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string,\n  name: PropTypes.string,\n}.isRequired;\n\nconst mapStateToProps = (store) => ({\n  name: store.player.name,\n  email: store.player.gravatarEmail,\n  score: store.player.score,\n});\n\nexport default connect(mapStateToProps)(Header);\n","const URL = 'https://opentdb.com/api_token.php?command=request';\n\nconst fetchToken = async () => {\n  const response = await fetch(URL);\n  const json = await response.json();\n\n  return json;\n};\n\nexport default fetchToken;\n","import fetchToken from '../../services/fetchTokenApi';\n\nexport const REQUEST_TOKEN = 'REQUEST_TOKEN';\nexport const SAVE_TOKEN = 'SAVE_TOKEN';\nexport const FAILED_REQUEST = 'FAILED_REQUEST';\nexport const SAVE_PLAYER_INFO = 'SAVE_PLAYER_INFO';\nexport const GET_QUESTIONS = 'GET_QUESTIONS';\nexport const SAVE_USER = 'SAVE_USER';\nexport const GET_SCORE_POINTS = 'SCORE_POINTS';\nexport const GET_NEXT_BTN_CLICK = 'GET_NEXT_BTN_CLICK';\nexport const HANDLE_DISABLE_BTNS = 'HANDLE_DISABLE_BTNS';\nexport const GET_TIMER = 'GET_TIMER';\nexport const GET_ASSERTIONS = 'GET_ASSERTIONS';\nexport const STOP_TIMER = 'STOP_TIMER';\n\nexport const requestToken = () => ({ type: REQUEST_TOKEN });\n\nexport const saveToken = (data) => ({ type: SAVE_TOKEN, data });\n\nexport const failedRequest = (error) => ({ type: FAILED_REQUEST, error });\n\nexport const savePlayerInfo = (name, email) => ({ type: SAVE_PLAYER_INFO, name, email });\n\nexport const getQuestions = (data) => ({ type: GET_QUESTIONS, data });\n\nexport const getScorePoints = (score) => ({ type: GET_SCORE_POINTS, score });\n\nexport const getNextBtnClick = (bool) => ({ type: GET_NEXT_BTN_CLICK, bool });\n\nexport const handleDisableBtns = (bool) => ({ type: HANDLE_DISABLE_BTNS, bool });\n\nexport const getTimer = (timer) => ({ type: GET_TIMER, timer });\n\nexport const getAssertions = (addPoint) => ({ type: GET_ASSERTIONS, addPoint });\n\nexport const stopTimer = () => ({ type: STOP_TIMER });\n\nexport const getToken = () => async (dispatch) => {\n  dispatch(requestToken);\n  try {\n    const response = await fetchToken();\n    dispatch(saveToken(response));\n\n    const url = `https://opentdb.com/api.php?amount=5&token=${response.token}`;\n    const responseAsk = await fetch(url);\n    const json = await responseAsk.json();\n\n    dispatch(getQuestions(json));\n  } catch (error) {\n    dispatch(failedRequest(error));\n  }\n};\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { MD5 } from 'crypto-js';\nimport Header from '../components/Header';\nimport { getAssertions, getScorePoints } from '../Redux/Action';\nimport '../Style/Feedback.css';\n\nclass Feedback extends Component {\n    countAsserts = () => {\n      const { count } = this.props;\n      const number = 3;\n      if (count < number) {\n        return 'Could be better...';\n      }\n      return 'Well Done!';\n    };\n\n    handleLocalStorageRanking = () => {\n      const { name, email, score, history } = this.props;\n      const gravatar = MD5(email).toString();\n      const ranking = { name, score, gravatar };\n\n      const token = localStorage.getItem('token');\n      const playerInfo = { ranking, token };\n\n      if (!localStorage.getItem('players')) {\n        localStorage.setItem('players', '[]');\n      }\n      const loadPlayers = JSON.parse(localStorage.getItem('players'));\n      const saveNewPlayers = [...loadPlayers, playerInfo];\n\n      localStorage.setItem('players', JSON.stringify(saveNewPlayers));\n      history.push('/ranking');\n    }\n\n    handlePlayAgainBtn = () => {\n      const { history, score, dispatch, count } = this.props;\n      const negative = -1;\n      const resetScore = score * negative;\n      const resetAssertions = count * negative;\n\n      dispatch(getScorePoints(resetScore));\n      dispatch(getAssertions(resetAssertions));\n      history.push('/');\n    }\n\n    render() {\n      const { count, score } = this.props;\n      return (\n        <div>\n          <Header />\n          <div className=\"feedbackConteiner\">\n            <h1\n              data-testid=\"feedback-text\"\n            >\n              { this.countAsserts() }\n            </h1>\n            <div className=\"pointsConteiner\">\n              <div className=\"pointsScore\">\n                <h2> Your score: </h2>\n                <h1\n                  data-testid=\"feedback-total-score\"\n                >\n                  {score}\n                </h1>\n              </div>\n              <div className=\"pointsHit\">\n                <h2> You hit: </h2>\n                <h1\n                  data-testid=\"feedback-total-question\"\n                >\n                  {count}\n                </h1>\n              </div>\n            </div>\n            <div className=\"buttonsFeedback\">\n              <button\n                className=\"buttonsFeed\"\n                data-testid=\"btn-play-again\"\n                type=\"button\"\n                onClick={ this.handlePlayAgainBtn }\n              >\n                Play Again\n              </button>\n              <button\n                className=\"buttonsFeed\"\n                data-testid=\"btn-ranking\"\n                type=\"button\"\n                onClick={ this.handleLocalStorageRanking }\n              >\n                Ranking\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n}\n\nFeedback.propTypes = {\n  count: PropTypes.any,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }),\n  score: PropTypes.any,\n}.isRequired;\n\nconst mapStateToProps = (store) => ({\n  count: store.player.assertions,\n  score: store.player.score,\n  name: store.player.name,\n  email: store.player.gravatarEmail,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { RiTimer2Line } from 'react-icons/ri';\nimport { connect } from 'react-redux';\nimport { getNextBtnClick, getTimer, handleDisableBtns } from '../Redux/Action';\nimport '../Style/Timer.css';\n\nclass Timer extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      timer: 30,\n    };\n  }\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    const timerInterval = 1000;\n\n    this.timer = setInterval(() => {\n      this.setState((prevState) => ({\n        timer: prevState.timer - 1,\n      }), () => {\n        const { timer } = this.state;\n        const { resetTimer } = this.props;\n        dispatch(getTimer(timer));\n\n        if (timer === 0) {\n          clearInterval(this.timer);\n          dispatch(handleDisableBtns(true));\n        }\n\n        if (resetTimer) {\n          this.setState({ timer: 30 });\n          dispatch(getNextBtnClick(false));\n        }\n      });\n    }, timerInterval);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const { timer } = this.state;\n    return (\n      <div className=\"conteinerTimer\">\n        <RiTimer2Line className=\"timer\" size={ 35 } />\n        <h1>{ timer }</h1>\n      </div>\n    );\n  }\n}\n\nTimer.propTypes = {\n  score: PropTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (store) => ({\n  resetTimer: store.player.nextBtnClick,\n});\n\nexport default connect(mapStateToProps)(Timer);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport '../Style/Game.css';\nimport { getAssertions, getNextBtnClick, getScorePoints,\n  handleDisableBtns } from '../Redux/Action';\nimport Timer from '../components/Timer';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      questionsIndex: 0,\n      correct: '',\n      wrong: '',\n      stopTimer: false,\n      showNextBtn: false,\n      answersArr: [],\n    };\n  }\n\n  componentDidMount() {\n    const { getGameData } = this.props;\n    if (getGameData.length === 0) return getGameData;\n    this.handleMultipleOptions();\n  }\n\n  handleQuestions = () => {\n    const { questionsIndex } = this.state;\n    const { getGameData } = this.props;\n\n    return getGameData[questionsIndex];\n  }\n\n  handleMultipleOptions = () => {\n    const { questionsIndex } = this.state;\n    const maxQuestions = 5;\n    if (questionsIndex === maxQuestions) return;\n    const { correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers } = this.handleQuestions();\n\n    const answersArr = incorrectAnswers.concat(correctAnswer);\n\n    for (let i = answersArr.length - 1; i > 0; i -= 1) {\n      const random = Math.floor(Math.random() * (i + 1));\n      [answersArr[i], answersArr[random]] = [answersArr[random], answersArr[i]];\n    }\n    this.setState({\n      answersArr,\n    });\n  }\n\n  getMultiplier = (difficulty) => {\n    const easyNum = 1;\n    const mediumNum = 2;\n    const hardNum = 3;\n    if (difficulty === 'easy') return easyNum;\n    if (difficulty === 'medium') return mediumNum;\n    if (difficulty === 'hard') return hardNum;\n  }\n\n  handleAnswersClick = ({ target }) => {\n    const { id } = target;\n    const { dispatch, timer } = this.props;\n    const { difficulty } = this.handleQuestions();\n\n    this.setState({\n      correct: 'correct',\n      wrong: 'wrong',\n      showNextBtn: true,\n      stopTimer: true,\n    });\n    if (id === 'correct') {\n      const baseScorePoints = 10;\n      const multiplier = this.getMultiplier(difficulty);\n      const totalScore = baseScorePoints + (timer * multiplier);\n\n      dispatch(getAssertions(1));\n      dispatch(getScorePoints(totalScore));\n    }\n    dispatch(handleDisableBtns(true));\n  }\n\n  handleNextBtnClick = () => {\n    const { dispatch } = this.props;\n\n    this.setState((prevState) => ({\n      correct: '',\n      wrong: '',\n      questionsIndex: prevState.questionsIndex + 1,\n      showNextBtn: false,\n      stopTimer: false,\n    }), () => {\n      this.handleMultipleOptions();\n      dispatch(getNextBtnClick(true));\n    });\n    dispatch(handleDisableBtns(false));\n  }\n\n  render() {\n    const { questionsIndex, wrong, correct, showNextBtn,\n      stopTimer, answersArr } = this.state;\n    const { getGameData, history, isDisabled, timer } = this.props;\n\n    if (getGameData.length === 0) {\n      history.push('/');\n      localStorage.removeItem('token');\n      return <h1>Invalid Token</h1>;\n    }\n    if (questionsIndex === getGameData.length) {\n      history.push('/feedback');\n      return <h1> End Game </h1>;\n    }\n    return (\n      <div>\n        <Header />\n        <div className=\"gamePage\">\n          <Timer\n            className=\"cont\"\n            stopTimer={ stopTimer }\n            handleNextBtnClick={ this.handleNextBtnClick }\n          />\n          <h1 data-testid=\"question-category\">{ this.handleQuestions().category }</h1>\n          <h2 data-testid=\"question-text\">{ this.handleQuestions().question }</h2>\n          <section data-testid=\"answer-options\">\n            {\n              answersArr.map((el, index) => (\n                <button\n                  className={ el === this.handleQuestions().correct_answer\n                    ? correct\n                    : wrong }\n                  key={ el }\n                  type=\"button\"\n                  data-testid={ el === this.handleQuestions().correct_answer\n                    ? 'correct-answer'\n                    : `wrong-answer-${index}` }\n                  id={ el === this.handleQuestions().correct_answer\n                    ? 'correct'\n                    : 'wrong' }\n                  onClick={ this.handleAnswersClick }\n                  disabled={ isDisabled }\n                >\n                  { el }\n                </button>\n              ))\n            }\n          </section>\n          {\n            (showNextBtn || timer === 0)\n            && (\n              <button\n                type=\"button\"\n                data-testid=\"btn-next\"\n                className=\"buttonAsk\"\n                onClick={ this.handleNextBtnClick }\n              >\n                Next\n              </button>\n            )\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  getCategory: PropTypes.shape({\n    length: PropTypes.number,\n  }),\n}.isRequired;\n\nconst mapStateToProps = (store) => ({\n  getGameData: store.asks.results,\n  isDisabled: store.player.isDisabled,\n  timer: store.player.timer,\n});\n\nexport default connect(mapStateToProps)(Game);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getToken, savePlayerInfo } from '../Redux/Action';\nimport { saveTokenToStorage } from '../tests/helpers/addTokenToStorage';\nimport logo from '../trivia.png';\nimport '../Style/Login.css';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      inputName: '',\n      inputEmail: '',\n    };\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleClick = async () => {\n    const { inputName, inputEmail } = this.state;\n    const { saveTokenToRedux, playerInfo, history } = this.props;\n    await saveTokenToRedux();\n\n    const { getTokenFromStore } = this.props;\n\n    saveTokenToStorage(getTokenFromStore);\n    playerInfo(inputName, inputEmail);\n\n    history.push('/game');\n  }\n\n  render() {\n    const { inputEmail, inputName } = this.state;\n    const { history } = this.props;\n    return (\n      <div className=\"loginPage\">\n        <div className=\"triviaLogo\">\n          <div className=\"App\">\n            <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n          </div>\n        </div>\n        <form className=\"formLogin\">\n          <label htmlFor=\"playerName\">\n            <input\n              placeholder=\"Nome do Jogador\"\n              className=\"inputLogin\"\n              id=\"playerName\"\n              data-testid=\"input-player-name\"\n              value={ inputName }\n              onChange={ this.handleChange }\n              name=\"inputName\"\n              type=\"text\"\n            />\n          </label>\n          <label htmlFor=\"email\">\n            <input\n              placeholder=\"Email\"\n              className=\"inputLogin\"\n              id=\"email\"\n              data-testid=\"input-gravatar-email\"\n              value={ inputEmail }\n              onChange={ this.handleChange }\n              name=\"inputEmail\"\n              type=\"email\"\n            />\n          </label>\n          <button\n            className=\"button\"\n            data-testid=\"btn-play\"\n            type=\"button\"\n            disabled={ !(inputName && inputEmail) }\n            onClick={ this.handleClick }\n          >\n            Play\n          </button>\n        </form>\n        <button\n          className=\"button\"\n          type=\"button\"\n          data-testid=\"btn-settings\"\n          onClick={ () => history.push('/settings') }\n        >\n          Configurações\n        </button>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  getTokenFromStore: PropTypes.any,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }),\n  saveToken: PropTypes.func,\n}.isRequired;\n\nconst mapStateToProps = (store) => ({\n  getTokenFromStore: store.token.token,\n  getResponseCode: store.token.responseCode,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveTokenToRedux: () => dispatch(getToken()),\n  playerInfo: (name, email) => dispatch(savePlayerInfo(name, email)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","export function getTokenFromStorage(key) {\n  const request = localStorage.getItem(key);\n\n  return request;\n}\n\nexport function saveTokenToStorage(token) {\n  localStorage.setItem('token', token);\n}\n\n// export default function addToCart(id) {\n//   // const product = await getDetailProduct(id);\n//   if (!localStorage.getItem('cartArray')) {\n//   localStorage.setItem('cartArray', '[]');\n//   }\n//   const cart = JSON.parse(localStorage.getItem('cartArray'));\n//   const newArray = [...cart, id];\n//   return localStorage.setItem('cartArray', JSON.stringify(newArray));\n// }\n\n// };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getAssertions, getScorePoints } from '../Redux/Action';\nimport '../Style/Ranking.css';\n\nclass Ranking extends React.Component {\n  handlePlayAgainBtn = () => {\n    const { history, score, dispatch, count } = this.props;\n    const negative = -1;\n    const resetScore = score * negative;\n    const resetAssertions = count * negative;\n\n    dispatch(getScorePoints(resetScore));\n    dispatch(getAssertions(resetAssertions));\n    history.push('/');\n  }\n\n  render() {\n    const ranking = JSON.parse(localStorage.getItem('players'));\n    const array = ranking.map((el) => Object.values(el.ranking))\n      .sort((a, b) => b[1] - a[1]);\n    console.log(array);\n\n    return (\n      <div className=\"rankingContainer\">\n        <section>\n          <h1\n            className=\"titleRank\"\n            data-testid=\"ranking-title\"\n          >\n            Ranking\n          </h1>\n          <ol className=\"olRank\">\n            {\n              array && array.map((el, index) => (\n                <ul\n                  key={ index }\n                  className=\"rankitem\"\n                >\n                  <div className=\"itemConteiner\">\n                    <h1\n                      data-testid={ `player-score-${index}` }\n                      className=\"rankScore\"\n                    >\n                      { el[1] }\n                    </h1>\n                    <img\n                      src={ `https://www.gravatar.com/avatar/${el[2]}` }\n                      alt=\"ranking\"\n                      className=\"imgRank\"\n                    />\n                    <h1\n                      data-testid={ `player-name-${index}` }\n                      className=\"playerRank\"\n                    >\n                      { el[0] }\n                    </h1>\n                  </div>\n                </ul>\n              ))\n            }\n          </ol>\n        </section>\n        <button\n          data-testid=\"btn-go-home\"\n          type=\"button\"\n          onClick={ this.handlePlayAgainBtn }\n        >\n          home\n        </button>\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }),\n}.isRequired;\n\nconst mapStateToProps = (store) => ({\n  count: store.player.assertions,\n  name: store.player.name,\n  email: store.player.gravatarEmail,\n  score: store.player.score,\n});\n\nexport default connect(mapStateToProps)(Ranking);\n","import React, { Component } from 'react';\nimport '../Style/Settings.css';\n\nclass Settings extends Component {\n  render() {\n    return (\n      <div className=\"settings\">\n        <h1\n          className=\"set-title\"\n          data-testid=\"settings-title\"\n        >\n          Configurações!\n\n        </h1>\n      </div>\n    );\n  }\n}\nexport default Settings;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Feedback from './Pages/Feedback';\nimport Game from './Pages/Game';\nimport Login from './Pages/Login';\nimport Ranking from './Pages/Ranking';\nimport Settings from './Pages/Settings';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route exact path=\"/game\" component={ Game } />\n      <Route path=\"/settings\" component={ Settings } />\n      <Route path=\"/feedback\" component={ Feedback } />\n      <Route path=\"/ranking\" component={ Ranking } />\n    </Switch>\n  );\n}\n","import { SAVE_PLAYER_INFO, GET_SCORE_POINTS, GET_NEXT_BTN_CLICK,\n  HANDLE_DISABLE_BTNS,\n  GET_TIMER,\n  GET_ASSERTIONS } from '../Action';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n  nextBtnClick: false,\n  isDisabled: false,\n  timer: 30,\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SAVE_PLAYER_INFO:\n    return {\n      ...state,\n      name: action.name,\n      gravatarEmail: action.email,\n    };\n  case GET_SCORE_POINTS:\n    return {\n      ...state,\n      score: state.score + action.score,\n    };\n  case GET_NEXT_BTN_CLICK:\n    return {\n      ...state,\n      nextBtnClick: action.bool,\n    };\n  case HANDLE_DISABLE_BTNS:\n    return {\n      ...state,\n      isDisabled: action.bool,\n    };\n  case GET_TIMER:\n    return {\n      ...state,\n      timer: action.timer,\n    };\n  case GET_ASSERTIONS:\n    console.log(action);\n    return {\n      ...state,\n      assertions: state.assertions + action.addPoint,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","import { REQUEST_TOKEN, SAVE_TOKEN, FAILED_REQUEST } from '../Action';\n\nconst INITIAL_STATE = {\n  responseCode: 0,\n  responseMessage: '',\n  token: '',\n  isLoading: false,\n  error: '',\n};\n\nconst token = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case REQUEST_TOKEN:\n    return {\n      ...state,\n      isLoading: true,\n    };\n  case SAVE_TOKEN:\n    return {\n      ...state,\n      responseCode: action.data.response_code,\n      responseMessage: action.data.response_message,\n      token: action.data.token,\n      isLoading: false,\n    };\n  case FAILED_REQUEST:\n    return {\n      ...state,\n      isLoading: false,\n      error: action.error,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default token;\n","import { GET_QUESTIONS } from '../Action';\n\nconst INITIAL_STATE = {\n  responseCode: 0,\n  results: [],\n};\n\nconst asks = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_QUESTIONS:\n    return {\n      ...state,\n      responseCode: action.response_code,\n      results: action.data.results,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default asks;\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport token from './token';\nimport asks from './asks';\n\nconst rootReducer = combineReducers({\n  player,\n  token,\n  asks,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../Reducer';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport store from './Redux/Store';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>,\n\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}